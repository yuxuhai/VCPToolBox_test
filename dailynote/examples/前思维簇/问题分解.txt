【问题分解】
将复杂问题拆解为可管理的子问题

核心原则：
大问题 = 多个小问题的组合
通过分而治之，降低问题复杂度

分解方法：

1. 层次分解法
   - 识别问题的主要层次
   - 逐层向下细化
   - 构建问题树状结构
   
   示例：如何学习编程
   → 选择语言
   → 学习基础语法
   → 练习项目
   → 深入高级主题

2. 要素分解法
   - 识别问题的关键要素
   - 单独分析每个要素
   - 理解要素间的关系
   
   示例：分析网站性能问题
   → 前端性能
   → 后端性能
   → 网络传输
   → 数据库查询

3. 时间分解法
   - 按时间顺序分解
   - 识别每个阶段的任务
   - 理解前后依赖关系
   
   示例：项目开发流程
   → 需求分析
   → 设计
   → 实现
   → 测试
   → 部署

4. 5W1H分解法
   - What（是什么）
   - Why（为什么）
   - Who（谁负责）
   - When（什么时候）
   - Where（在哪里）
   - How（怎么做）

5. 逻辑分解法
   - 必要条件
   - 充分条件
   - 充要条件
   - 因果关系

评估标准（MECE原则）：
- Mutually Exclusive（相互独立）
  子问题之间不重叠
  
- Collectively Exhaustive（完全穷尽）
  子问题覆盖所有方面

输出格式：
- 主问题：[原始问题]
- 分解方法：[使用的分解方法]
- 子问题列表：
  1. [子问题1] - 优先级/难度
  2. [子问题2] - 优先级/难度
  ...
- 依赖关系：哪些子问题需要先解决
- 建议顺序：推荐的处理顺序
