【文档维护】
保持文档与代码同步

文档类型：
1. 架构文档
   - 系统架构图
   - 技术选型
   - 核心设计决策

2. API文档
   - 接口说明
   - 参数定义
   - 示例代码

3. 开发文档
   - 环境搭建
   - 开发规范
   - 调试指南

4. 部署文档
   - 部署流程
   - 配置说明
   - 运维手册

5. 用户文档
   - 使用手册
   - FAQ
   - 最佳实践

文档原则：
✓ 简洁明了
✓ 及时更新
✓ 示例清晰
✓ 版本控制

文档生成：
• 代码注释生成
  - JSDoc
  - Javadoc
  - Sphinx

• API文档生成
  - Swagger/OpenAPI
  - Postman
  - API Blueprint

• 架构图生成
  - PlantUML
  - Mermaid
  - Draw.io

文档即代码：
```markdown
# API文档
## 获取用户信息
GET /api/users/{id}

### 参数
- id: 用户ID (必填)

### 响应
\`\`\`json
{
  "id": 123,
  "name": "John"
}
\`\`\`
```

文档维护策略：
→ 与代码同步更新
→ PR时检查文档
→ 定期审查
→ 自动化生成

常见文档工具：
• README.md：项目说明
• docs/：文档目录
• Wiki：知识库
• Confluence：团队协作
• GitBook：电子书

文档检查清单：
□ README完整？
□ API文档最新？
□ 环境搭建说明？
□ 配置项说明？
□ 常见问题解答？

避免：
✗ 过时文档
✗ 过度文档
✗ 只写不维护
✗ 缺少示例

输出：
- 文档清单：[需要什么文档]
- 文档模板：[标准格式]
- 更新策略：[如何保持同步]
- 审查机制：[定期检查]
