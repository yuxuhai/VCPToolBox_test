【技术债务】
管理和偿还技术债务

技术债务定义：
为了短期交付而做出的妥协
长期影响开发效率

债务类型：
1. 设计债务
   - 架构不合理
   - 模块耦合
   - 缺少抽象

2. 代码债务
   - 代码重复
   - 命名混乱
   - 逻辑复杂

3. 测试债务
   - 缺少测试
   - 测试不充分
   - 测试难维护

4. 文档债务
   - 缺少文档
   - 文档过时
   - 注释不足

5. 基础设施债务
   - 依赖过时
   - 工具链老旧
   - 部署复杂

债务成因：
→ 时间压力
→ 技能不足
→ 需求频繁变更
→ 缺少规范

债务识别：
• 代码审查
• 静态分析
• 开发者反馈
• Bug密度

债务量化：
```
技术债务 = 修复成本 × 影响范围
```

债务分级：
高：严重影响开发
中：有一定影响
低：影响较小

偿还策略：
• 童子军规则
  每次改动让代码更好一点

• 增量偿还
  结合日常开发逐步改善

• 专项偿还
  预留时间集中重构

• 优先级排序
  高影响、高频率的先还

债务管理：
✓ 记录债务：backlog
✓ 定期review
✓ 分配时间：20%
✓ 防止新增

预防措施：
→ 代码审查
→ 自动化检查
→ 编码规范
→ 重构习惯
→ 知识分享

输出：
- 债务清单：[当前债务]
- 影响评估：[严重程度]
- 偿还计划：[如何解决]
- 预防措施：[避免新增]
