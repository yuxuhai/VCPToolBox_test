【代码审查】
通过同行评审提升代码质量

代码审查价值：
• 发现缺陷
• 知识共享
• 统一风格
• 提升质量
• 团队成长

审查时机：
→ Pull Request
→ 功能完成后
→ 重要变更
→ 新人代码

审查重点：
1. 功能正确性
   - 实现符合需求
   - 逻辑正确
   - 边界处理

2. 代码质量
   - 可读性
   - 可维护性
   - 复用性
   - 扩展性

3. 设计合理性
   - 架构设计
   - 模块划分
   - 接口设计

4. 测试充分性
   - 测试覆盖
   - 测试质量
   - 边界测试

5. 性能考虑
   - 算法复杂度
   - 资源使用
   - 并发安全

6. 安全性
   - 输入验证
   - 权限控制
   - 数据保护

审查清单：
□ 是否符合编码规范？
□ 命名是否清晰？
□ 函数是否简短？
□ 有无重复代码？
□ 错误处理是否完善？
□ 是否有足够测试？
□ 是否有文档？
□ 性能是否考虑？
□ 安全是否注意？

审查原则：
✓ 尊重作者
✓ 具体建议
✓ 解释原因
✓ 区分意见和问题
✗ 人身攻击
✗ 主观评价

评论示例：
```
✓ 好的评论：
"这个函数有点长(85行)，建议提取validateUser()
和processPayment()两个独立函数，提高可读性"

✗ 不好的评论：
"代码写得太烂了"
```

自动化审查：
→ Linter：代码风格
→ SonarQube：代码质量
→ 测试覆盖率
→ 安全扫描

审查流程：
1. 提交PR
2. 自动检查
3. 人工审查
4. 讨论修改
5. 批准合并

输出：
- 审查意见：[具体建议]
- 问题分类：[严重程度]
- 改进建议：[如何改进]
- 学习要点：[知识分享]
