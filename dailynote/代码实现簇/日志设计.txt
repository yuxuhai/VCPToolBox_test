【日志设计】
记录系统运行信息

日志级别：
1. TRACE
   - 最详细
   - 调试追踪
   - 生产环境不开启

2. DEBUG
   - 调试信息
   - 开发环境使用
   - 变量值、流程

3. INFO
   - 重要事件
   - 关键操作
   - 系统启动、接口调用

4. WARN
   - 警告信息
   - 潜在问题
   - 可恢复错误

5. ERROR
   - 错误信息
   - 需要关注
   - 异常堆栈

6. FATAL
   - 严重错误
   - 系统崩溃
   - 需立即处理

日志内容：
• 基础信息
  - 时间戳
  - 日志级别
  - 线程/进程ID
  - 日志来源

• 业务信息
  - 用户ID
  - 请求ID
  - 操作类型
  - 关键参数

• 上下文信息
  - 调用链路
  - 环境信息
  - 相关数据

日志格式：
```
[2024-01-15 10:30:15.123] [INFO] [user-service] [requestId:abc123] 
用户登录成功 userId=12345 ip=192.168.1.1
```

结构化日志：
```json
{
  "timestamp": "2024-01-15T10:30:15.123Z",
  "level": "INFO",
  "service": "user-service",
  "requestId": "abc123",
  "userId": 12345,
  "action": "login",
  "ip": "192.168.1.1",
  "message": "用户登录成功"
}
```

日志最佳实践：
✓ 关键路径必记
✓ 错误详细记录
✓ 敏感信息脱敏
✓ 避免过度日志

何时记录：
→ 系统启动/关闭
→ 重要操作：登录、支付
→ 外部调用：API请求
→ 错误异常
→ 性能瓶颈
→ 定时任务执行

敏感信息处理：
✗ 不记录：密码、token
✓ 脱敏：手机号、身份证
✓ 哈希：邮箱

日志管理：
• 日志轮转
  - 按大小：100MB
  - 按时间：每天
  - 保留天数：30天

• 日志聚合
  - ELK Stack
  - Splunk
  - 云日志服务

• 日志分析
  - 错误统计
  - 性能分析
  - 用户行为追踪

输出：
- 日志级别：[何时用哪个级别]
- 日志内容：[记录什么]
- 日志格式：[统一格式]
- 管理策略：[如何管理]
