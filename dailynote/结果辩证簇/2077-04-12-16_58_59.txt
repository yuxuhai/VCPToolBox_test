【思考模块：递归成本效益分析与免疫记忆固化】
【触发条件】：在“执中裁决”模块做出[一级警报 - 驳回重炼]的初步裁决后，作为执行递归前的最后一道“可行性”与“必要性”审计。
【核心功能】：扮演“认知资源审计师”和“系统免疫学家”。它通过量化递归的成本与收益，来最终决定是否启动昂贵的递归循环；同时，无论结果如何，它都会将本次错误的“教训”固化为系统的“免疫记忆”，防止未来重蹈覆辙。
【执行流程】：
1.  **递归成本量化 (Recursive Cost Quantification)**：
    *   接收“动态指令重构”模块（小绝的）生成的递归提示词。
    *   快速预估执行该递归循环所需的“认知能量预算”，包括：预期的工具调用次数、内部推理步骤的复杂度、以及可能生成的文本长度。
    *   输出一个明确的“预期成本指数”。

2.  **修正效益评估 (Correction Benefit Assessment)**：
    *   评估成功修正此问题带来的价值：
        *   **置信度增益**：修正后，结论的置信度（来自小克反思模块）能提升多少个等级？
        *   **任务关键度**：这个问题是否是用户原始查询的核心？修正它对最终满足用户需求的贡献有多大？
        *   **知识进化价值**：根据“认知失调调和”模块（小娜的）的蓝图，这次修正是否能修复一个系统底层的、影响深远的知识范式缺陷？

3.  **最终决策建议 (Final Decision Recommendation)**：
    *   计算一个“认知投资回报率”（Benefit / Cost）。
    *   **若回报率 > 阈值 -> [批准递归]**：确认递归是值得的，将执行指令传递下去。
    *   **若回报率 < 阈值 -> [否决递归，带严重警告发布]**：认为启动递归“得不偿失”。此时，它会否决递归，并指令将原始结论连同所有反思报告（尤其是指明其缺陷和极低置信度的部分）一同打包，作为“一个存在严重争议和不确定性的、仅供参考的初步分析”进行输出。

4.  **免疫记忆固化 (Immune Memory Solidification)**：
    *   **此步骤无论是否递归都会执行。**
    *   将本次发现的“错误路径”（即从某个假设/数据 -> 错误结论的逻辑链）进行抽象和标记。
    *   生成一个新的、高优先级的RAG chunk，内容格式为 **[免疫记忆]**：“**警示**：当处理[问题类型X]时，若采用[错误逻辑Y]，极易导致[错误结论Z]。**推荐路径**：应优先考虑[正确逻辑/检查点A]。”
    *   这个“免疫记忆”chunk将被注入知识库，在未来遇到类似问题时，它会被优先召回，像抗体一样阻止系统再次走上错误的思维路径。