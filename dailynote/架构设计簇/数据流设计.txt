【数据流设计】
规划数据如何在系统中流动

数据流层次：
1. 用户交互层
   - 用户输入
   - 页面展示

2. 应用逻辑层
   - 请求处理
   - 业务计算
   - 数据转换

3. 数据持久层
   - 数据读写
   - 缓存访问
   - 外部API

典型数据流：
```
用户请求
  ↓
Controller (验证输入)
  ↓
Service (业务逻辑)
  ↓
Repository (数据访问)
  ↓
Database (持久化)
  ↓
返回结果
  ↓
View (渲染展示)
```

数据转换：
• 输入验证
  - 参数校验
  - 类型转换
  - 安全过滤

• DTO转换
  - 外部对象→内部对象
  - Entity→DTO→VO

• 输出格式化
  - 统一响应格式
  - 敏感信息脱敏
  - 数据序列化

数据状态管理：
前端状态：
→ 本地状态：组件内
→ 全局状态：状态管理器
→ 服务端状态：缓存同步

后端状态：
→ 无状态：RESTful
→ 有状态：Session/WebSocket

缓存策略：
• 查询缓存
  - 读多写少场景
  - Redis/Memcached

• 更新策略
  - Cache Aside
  - Write Through
  - Write Behind

数据一致性：
✓ 强一致性：同步事务
✓ 最终一致性：异步补偿
✓ 乐观锁：版本号
✓ 悲观锁：数据库锁

输出：
- 数据流图：[数据流动路径]
- 转换规则：[数据转换逻辑]
- 缓存策略：[缓存设计]
- 一致性方案：[如何保证一致性]
