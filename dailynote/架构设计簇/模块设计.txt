【模块设计】
划分系统功能单元

模块定义：
具有独立功能的代码单元

模块划分原则：
1. 高内聚
   - 模块内部功能紧密相关
   - 专注单一领域

2. 低耦合
   - 模块间依赖最小化
   - 通过接口交互

3. 职责单一
   - 一个模块一个职责
   - 便于理解和维护

4. 可复用
   - 通用功能抽取
   - 避免重复代码

模块类型：
• 业务模块
  - 用户模块
  - 订单模块
  - 商品模块

• 基础模块
  - 认证授权
  - 日志记录
  - 配置管理

• 工具模块
  - 工具函数
  - 通用组件
  - 第三方封装

模块结构：
```
UserModule/
├── controller/    # 控制层
├── service/       # 业务逻辑
├── repository/    # 数据访问
├── model/         # 数据模型
├── dto/           # 数据传输对象
└── interface/     # 对外接口
```

模块依赖：
✓ 单向依赖：A→B
✓ 分层依赖：上层→下层
✗ 循环依赖：A↔B

依赖管理：
• 依赖注入
• 接口抽象
• 配置解耦

模块通信：
→ 同步调用：直接方法调用
→ 异步消息：事件总线/消息队列
→ API调用：HTTP/RPC

输出：
- 模块清单：[所有模块]
- 模块职责：[每个模块做什么]
- 依赖关系：[模块间依赖]
- 接口定义：[对外接口]
